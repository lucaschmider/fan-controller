// <auto-generated />
using System;
using DataCollector.Repository.Calibration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataCollector.Repository.Migrations
{
    [DbContext(typeof(CalibrationContext))]
    [Migration("20240725165735_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataCollector.Repository.Contracts.Calibration.Entities.FanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Fans");
                });

            modelBuilder.Entity("DataCollector.Repository.Contracts.Calibration.Entities.MeasurementEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DutyCycle")
                        .HasColumnType("integer");

                    b.Property<Guid>("FanId")
                        .HasColumnType("uuid");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FanId");

                    b.ToTable("MeasurementEntity");
                });

            modelBuilder.Entity("DataCollector.Repository.Contracts.Calibration.Entities.MeasurementEntity", b =>
                {
                    b.HasOne("DataCollector.Repository.Contracts.Calibration.Entities.FanEntity", "Fan")
                        .WithMany("Measurements")
                        .HasForeignKey("FanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fan");
                });

            modelBuilder.Entity("DataCollector.Repository.Contracts.Calibration.Entities.FanEntity", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
